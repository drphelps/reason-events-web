// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Promise$BsAbstract = require("bs-abstract/src/implementations/Promise.bs.js");

function rejectWith(message) {
  return Promise.reject(new Error(message));
}

function logMessage(exn) {
  var message = exn.message;
  console.log(message !== undefined ? message : "(no error message)");
  return /* () */0;
}

function cancelTimeout(delay, message) {
  return new Promise((function (_, reject) {
                setTimeout((function () {
                        return reject(new Error(message));
                      }), delay);
                return /* () */0;
              }));
}

function toString(obj) {
  return Js_option.getExn(Js_primitive.undefined_to_opt(JSON.stringify(obj)));
}

function getOrReject(opt) {
  if (opt) {
    return Promise.resolve(opt[0]);
  } else {
    return Promise.reject(new Error("Unable to get"));
  }
}

function rejectIfEmpty(error, results) {
  if (results.length !== 0) {
    return Promise.resolve(results);
  } else {
    return Promise.reject(new Error(error));
  }
}

function pickFirst(results) {
  return Promise.resolve(Caml_array.caml_array_get(results, 0));
}

function $less$bang$great(a, b) {
  return a.catch(Curry.__1(b));
}

var Infix_000 = /* <$> */Promise$BsAbstract.Infix[0];

var Infix_001 = /* <#> */Promise$BsAbstract.Infix[1];

var Infix_002 = /* <*> */Promise$BsAbstract.Infix[2];

var Infix_003 = /* >>= */Promise$BsAbstract.Infix[3];

var Infix_004 = /* =<< */Promise$BsAbstract.Infix[4];

var Infix = /* module */[
  Infix_000,
  Infix_001,
  Infix_002,
  Infix_003,
  Infix_004,
  /* <!> */$less$bang$great
];

exports.rejectWith = rejectWith;
exports.logMessage = logMessage;
exports.cancelTimeout = cancelTimeout;
exports.toString = toString;
exports.getOrReject = getOrReject;
exports.rejectIfEmpty = rejectIfEmpty;
exports.pickFirst = pickFirst;
exports.Infix = Infix;
/* Promise-BsAbstract Not a pure module */
